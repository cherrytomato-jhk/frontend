{"version":3,"sources":["img/cherries.png","img/sample.png","inputAndOutput.js","summary.js","graph.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputAndOutput","state","TextValue","changeText","e","setState","target","value","props","upload","className","this","onChange","placeholder","type","id","onClick","clickButton","Component","Summary","showSummary","summary","relation","dataFunction","datas","links","nodes","forEach","element","includes","source","push","Data","length","data","config","myConfig","label","nodeHighlightBehavior","node","color","size","highlightStrokeColor","link","highlightColor","renderLabel","width","height","App","results","getDatas","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","result","ClickButton","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46ca36a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cherries.7c374247.png\";","module.exports = __webpack_public_path__ + \"static/media/sample.48a5081c.png\";","import React, {Component} from 'react';\nimport './default.css'\n\n\nexport default class InputAndOutput extends Component{\n\nstate={\n    TextValue : \"\"\n}\n\nchangeText=(e)=>{\n  this.setState({\n    TextValue : e.target.value  \n  },()=>{\n    this.props.upload(this.state.TextValue)\n  })\n\n}\n\n\n\nrender(){\n  return (\n    <div className=\"AreaWrapper\">\n        <textarea className=\"inputArea\" value={this.state.TextValue} onChange={this.changeText}placeholder=\"영어 기사를 넣어주세요\"></textarea>\n        <button type=\"button\" id=\"summarizeButton\" className=\"btn btn-outline-danger\" onClick={this.props.clickButton}>줄이기</button>\n    </div>\n  )}\n}\n\n","import React, {Component} from 'react';\nimport './default.css'\nimport sample from './img/sample.png'\n\nexport default class Summary extends Component{\n\n\n  showSummary=()=>{\n    if(this.props.summary){\n    return this.props.summary\n    }\n    return <h3>\"기사내용을 넣으면 요약문이 여기에 나타납니다.\"</h3>\n  }\n\n  render(){\n    return (\n      <div className=\"abstractWrapper\">\n        <h2>Abstractive Summary</h2>\n        <div className=\"summaries\">\n          {this.showSummary()}\n        </div>\n      </div>\n    )}\n  }\n  ","import React, {Component} from 'react';\nimport {Graph} from\"react-d3-graph\";\nimport \"./default.css\"\n\nexport default class relation extends Component {\n\n\n  dataFunction=(props)=>{\n    let datas = { links: [], nodes:[]}\n\n    if(!props){\n      return datas\n    }\n\n    datas[\"links\"]=  props\n  \n    let nodes =[]\n    props.forEach(element=>{\n      if(!nodes.includes(element.source)){\n        nodes.push( {id: element.source })\n      }\n      if(!nodes.includes(element.target)){\n        nodes.push( {id: element.target})\n      }\n    })\n  \n    datas[\"nodes\"] = nodes\n  \n  return datas\n  }\n\nrender(){\n  let Data = this.dataFunction(this.props.relation)\n  if(Data.links.length==0){\n    Data=data\n  }\n\n  return (\n    <div className=\"RelationExtraction\">\n      <h2>Relation Extraction</h2>\n      <Graph\n          id=\"hello\" // id is mandatory, if no id is defined rd3g will throw an error\n          data={Data}\n          config={myConfig}\n        >\n      </Graph>\n    </div>\n  )}    \n}\n\nconst data = {\n  nodes: [{ id: \"Harry\" }, { id: \"Sally\" }, { id: \"Alice\" }],\n  links: [{ source: \"Harry\", target: \"Sally\" , label: \"picka\"}, { source: \"Harry\", target: \"Alice\" , label:\"chu\"}]\n};\n\n\n// the graph configuration, you only need to pass down properties\n// that you want to override, otherwise default ones will be used\nconst myConfig = {\n  nodeHighlightBehavior: true,\n  node: {\n      color: \"red\",\n      size: 120,\n      highlightStrokeColor: \"blue\",\n  },\n  link: {\n      highlightColor: \"lightblue\",\n      renderLabel: true\n  },\n  width: 900,\n  height:900\n};\n\n// graph event callbacks\n","import React, {Component} from 'react';\nimport logo from './img/cherries.png';\nimport './App.css';\nimport InputAndOutput from './inputAndOutput' \nimport Summary from './summary'\nimport Graph from './graph'\n\n\nexport default class App extends Component {\n\n  state={\n    relation: [],\n    summary: null,\n    results : null \n  }\n\n\n  getDatas=()=>{\n    console.log(\"못받나?\", this.state.summary)\n    fetch('http://localhost:5000/result', {method:\"POST\" , \t\theaders: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n  },body:JSON.stringify({ \"corpus\": this.state.summary})})\n   .then(res=> res.json())\n   .then(result=> {\n    console.log(\"결과\", result)\n    this.setState({ relation : result.relation, results: result.summary})\n   })\n  }\n\n\n  ClickButton=()=>{\n    console.log(\"clicked\")\n    this.getDatas();\n  }\n\n  upload=(e)=>{\n    this.setState({summary:e})\n  }\n\n  render(){ \n    return (\n      <div className=\"App\">\n          <div className=\"imageWrapper\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n          <div className=\"headLine\">\n            <h1>영어 기사를 5초만에 이해하기</h1>\n          </div>\n          <div className=\"inputAndSummary\">\n            <InputAndOutput clickButton={this.ClickButton} upload={(e)=> this.upload(e)}></InputAndOutput>\n          </div>\n          <div className=\"summaryWrapper\">\n              <Summary summary={this.state.results}/>\n              <Graph relation={this.state.relation}></Graph>\n            </div>\n      </div>\n    )}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}